diff --git a/dom/ipc/ContentParent.cpp b/dom/ipc/ContentParent.cpp
--- a/dom/ipc/ContentParent.cpp
+++ b/dom/ipc/ContentParent.cpp
@@ -162,16 +162,18 @@
 #include "prio.h"
 #include "private/pprio.h"
 #include "ContentProcessManager.h"
 #include "mozilla/psm/PSMContentListener.h"
 #include "nsPluginHost.h"
 #include "nsPluginTags.h"
 #include "nsIBlocklistService.h"
 
+#include "nsILoginManager.h"
+
 #include "nsIBidiKeyboard.h"
 
 #ifdef MOZ_WEBRTC
 #include "signaling/src/peerconnection/WebrtcGlobalParent.h"
 #endif
 
 #if defined(ANDROID) || defined(LINUX)
 #include "nsSystemInfo.h"
@@ -5213,16 +5215,45 @@ ContentParent::RecvBeginDriverCrashGuard
 
 bool
 ContentParent::RecvEndDriverCrashGuard(const uint32_t& aGuardType)
 {
   mDriverCrashGuard = nullptr;
   return true;
 }
 
+bool
+ContentParent::RecvFindLogins(
+            const nsString& prepath,
+            nsString* aUsername,
+            nsString* aPassword)
+{
+  nsCOMPtr<nsILoginManager> loginmanager = do_GetService("@mozilla.org/login-manager;1");
+  /*
+  nsILoginInfo** loginInfos;
+  nsAString httpRealm(prepath);
+  nsAString actionUrl("");
+  unsigned int count;
+  //const nsAString& hostname("{}");
+  loginmanager->FindLogins(&count, "{}", actionUrl, httpRealm, &loginInfos);
+  nsILoginInfo* loginInfo = loginInfos[0];
+  if (loginInfo) {
+    nsAString password;
+    nsAString username;
+    loginInfo->GetUsername(username);
+    loginInfo->GetPassword(password);
+    *aUsername.Assign(username);
+    *aPassword.Assign(password);
+  }
+  */
+  *aUsername = NS_LITERAL_STRING("username");
+  *aPassword = NS_LITERAL_STRING("password");
+  return true;
+}
+
 } // namespace dom
 } // namespace mozilla
 
 NS_IMPL_ISUPPORTS(ParentIdleListener, nsIObserver)
 
 NS_IMETHODIMP
 ParentIdleListener::Observe(nsISupports*, const char* aTopic, const char16_t* aData) {
     mozilla::unused << mParent->SendNotifyIdleObserver(mObserver,
